#include <stdlib.h> // Required for malloc

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    // Create a dummy head node for the result list.
    // This simplifies handling the first node.
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    dummyHead->val = 0; // Value doesn't matter for dummy
    dummyHead->next = NULL;

    struct ListNode* current = dummyHead; // Pointer to the current node in the result list
    int carry = 0; // Variable to store the carry-over digit

    // Loop as long as there are digits in either list or there is a carry
    while (l1 != NULL || l2 != NULL || carry != 0) {
        int x = (l1 != NULL) ? l1->val : 0; // Get digit from l1, or 0 if l1 is exhausted
        int y = (l2 != NULL) ? l2->val : 0; // Get digit from l2, or 0 if l2 is exhausted

        int sum = x + y + carry; // Calculate the sum of digits and carry
        carry = sum / 10;        // Update carry for the next iteration
        int digit = sum % 10;    // Get the digit to be placed in the current node

        // Create a new node for the result list
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->val = digit;
        newNode->next = NULL;

        // Link the new node to the result list
        current->next = newNode;
        current = newNode; // Move current pointer to the new node

        // Move to the next nodes in l1 and l2 if they exist
        if (l1 != NULL) {
            l1 = l1->next;
        }
        if (l2 != NULL) {
            l2 = l2->next;
        }
    }

    // The result list starts from dummyHead->next
    struct ListNode* result = dummyHead->next;
    free(dummyHead); // Free the dummy head node
    return result;
}
